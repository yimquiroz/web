{"version":3,"file":"rfc-facil.es5.js","sources":["../src/homoclave.ts","../src/verification-digit.ts","../src/date-code.ts","../src/common.ts","../src/natural-person-tdc-code.ts","../node_modules/written-number/lib/util.js","../node_modules/written-number/lib/index.js","../node_modules/roman-numerals/lib/toArabic.js","../node_modules/roman-numerals/lib/toRoman.js","../node_modules/roman-numerals/index.js","../src/juristic-person-tdc-code.ts","../src/rfc-facil.ts"],"sourcesContent":["const map: { [key: string]: string } = {\n  ' ': '00',\n  '0': '00',\n  '1': '01',\n  '2': '02',\n  '3': '03',\n  '4': '04',\n  '5': '05',\n  '6': '06',\n  '7': '07',\n  '8': '08',\n  '9': '09',\n  '&': '10',\n  A: '11',\n  B: '12',\n  C: '13',\n  D: '14',\n  E: '15',\n  F: '16',\n  G: '17',\n  H: '18',\n  I: '19',\n  J: '21',\n  K: '22',\n  L: '23',\n  M: '24',\n  N: '25',\n  O: '26',\n  P: '27',\n  Q: '28',\n  R: '29',\n  S: '32',\n  T: '33',\n  U: '34',\n  V: '35',\n  W: '36',\n  X: '37',\n  Y: '38',\n  Z: '39',\n  Ñ: '40'\n}\n\nconst digits: string = '123456789ABCDEFGHIJKLMNPQRSTUVWXYZ'\n\nexport default function calculate(fullName: string): string {\n  const mappedFullName: string =\n    '0' +\n    normalize(fullName)\n      .split('')\n      .map(mapCharacterToTwoDigitsCode)\n      .join('')\n\n  const sum: number = sumPairsOfDigits(mappedFullName)\n  const lastThreeDigits: number = sum % 1000\n  const quo: number = lastThreeDigits / 34\n  const reminder: number = lastThreeDigits % 34\n  return digits.charAt(quo) + digits.charAt(reminder)\n}\n\n// remove accents without removing the Ñ (u0303)\n// and remove special characters: .'-,\nfunction normalize(input: string): string {\n  return input\n    .toUpperCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u0302]/g, '')\n    .replace(/[\\u0304-\\u036f]/g, '')\n    .replace(/N\\u0303/g, 'Ñ')\n    .replace(/[-\\.',]/g, '') // remove .'-,\n}\n\nfunction sumPairsOfDigits(input: string): number {\n  let sum: number = 0\n  for (let i = 0; i < input.length - 1; i++) {\n    let firstPair: number = parseInt(input.substring(i, i + 2), 10)\n    let secondPair: number = parseInt(input.substring(i + 1, i + 2), 10)\n    sum += firstPair * secondPair\n  }\n  return sum\n}\n\nfunction mapCharacterToTwoDigitsCode(c: string): string {\n  const m = map[c]\n  if (!m) {\n    throw Error(`No two-digit code mapping for char ${c}`)\n  }\n  return m\n}\n","const map: { [key: string]: number } = {\n  '0': 0,\n  '1': 1,\n  '2': 2,\n  '3': 3,\n  '4': 4,\n  '5': 5,\n  '6': 6,\n  '7': 7,\n  '8': 8,\n  '9': 9,\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15,\n  G: 16,\n  H: 17,\n  I: 18,\n  J: 19,\n  K: 20,\n  L: 21,\n  M: 22,\n  N: 23,\n  '&': 24,\n  O: 25,\n  P: 26,\n  Q: 27,\n  R: 28,\n  S: 29,\n  T: 30,\n  U: 31,\n  V: 32,\n  W: 33,\n  X: 34,\n  Y: 35,\n  Z: 36,\n  ' ': 37,\n  Ñ: 38\n}\n\nexport default function calculate(rfc12Digits: string): string {\n  const sum: number = rfc12Digits\n    .split('')\n    .map(c => map[c.toUpperCase()] || 0)\n    .reduce((sum, current, index) => sum + current * (13 - index), 0)\n  const reminder: number = sum % 11\n  if (reminder === 0) {\n    return '0'\n  } else {\n    return (11 - reminder).toString(16).toUpperCase() // from 1 to A (hex)\n  }\n}\n","export function dateCode(day: number, month: number, year: number): string {\n  return year.toString().slice(-2) + zeroPadded(month) + zeroPadded(day)\n}\n\nfunction zeroPadded(n: number): string {\n  return ('00' + n).slice(-2)\n}\n","export function removeAccents(input: string): string {\n  return input.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n}\n","import { dateCode } from './date-code'\nimport { removeAccents } from './common'\n\nexport interface NaturalPerson {\n  name: string\n  firstLastName: string\n  secondLastName: string\n  day: number\n  month: number\n  year: number\n}\n\nexport function naturalPersonTenDigitsCode(person: NaturalPerson): string {\n  return new NameCode(person).toString() + birthdayCode(person)\n}\n\n// matches any ocurrence of the special particles as a word: '^foo | foo | foo$''\nconst specialParticlesRegex: RegExp = new RegExp(\n  '(?:' +\n    ['DE', 'LA', 'LAS', 'MC', 'VON', 'DEL', 'LOS', 'Y', 'MAC', 'VAN', 'MI']\n      .map(p => `^${p} | ${p} | ${p}$`)\n      .join('|') +\n    ')',\n  'g'\n)\n\nfunction birthdayCode(person: NaturalPerson): string {\n  return dateCode(person.day, person.month, person.year)\n}\n\nclass NameCode {\n  private filteredPersonName: string\n\n  constructor(private person: NaturalPerson) {\n    this.filteredPersonName = this.getFilteredPersonName()\n  }\n\n  toString(): string {\n    return this.obfuscateForbiddenWords(this.calculateCode())\n  }\n\n  private calculateCode(): string {\n    if (this.isEmpty(this.person.firstLastName)) {\n      return (\n        this.normalize(this.person.secondLastName).substring(0, 2) +\n        this.filteredPersonName.substring(0, 2)\n      )\n    } else if (this.isEmpty(this.person.secondLastName)) {\n      return (\n        this.normalize(this.person.firstLastName).substring(0, 2) +\n        this.filteredPersonName.substring(0, 2)\n      )\n    } else if (this.isFirstLastNameIsTooShort()) {\n      return (\n        this.normalize(this.person.firstLastName).charAt(0) +\n        this.normalize(this.person.secondLastName).charAt(0) +\n        this.filteredPersonName.substring(0, 2)\n      )\n    } else {\n      return (\n        this.normalize(this.person.firstLastName).charAt(0) +\n        this.firstVowelExcludingFirstCharacterOf(this.normalize(this.person.firstLastName)) +\n        this.normalize(this.person.secondLastName).charAt(0) +\n        this.filteredPersonName.charAt(0)\n      )\n    }\n  }\n\n  private obfuscateForbiddenWords(s: string): string {\n    const match =\n      s.match(\n        /(BUE[IY]|CAC[AO]|CAGA|KOGE|KAKA|MAME|KOJO|[KQ]ULO|CAGO|CO[GJ]E|COJO|FETO|JOTO|KA[CG]O)/\n      ) || s.match(/(MAMO|MEAR|M[EI]ON|MOCO|MULA|PED[AO]|PENE|PUT[AO]|RATA|RUIN)/)\n    return match ? s.substring(0, 3) + 'X' : s\n  }\n\n  // filter out common names (if more than one is provided)\n  private getFilteredPersonName(): string {\n    const normalized = this.normalize(this.person.name)\n    if (this.person.name.split(' ').length > 1) {\n      return normalized.replace(/^(JOSE|MARIA|MA|MA\\.)\\s+/i, '')\n    }\n    return normalized\n  }\n\n  private normalize(s: string): string {\n    return removeAccents(s.toUpperCase())\n      .replace(/\\s+/g, '  ') // double space to allow multiple special-particles matching\n      .replace(specialParticlesRegex, '')\n      .replace(/\\s+/g, ' ') // reset space\n      .trim()\n  }\n\n  private firstVowelExcludingFirstCharacterOf(s: string): string {\n    let result: RegExpExecArray | null = /[aeiou]/i.exec(s.slice(1))\n    if (!result) {\n      throw new Error('')\n    }\n    return result[0]\n  }\n\n  private isFirstLastNameIsTooShort(): boolean {\n    return this.normalize(this.person.firstLastName).length <= 2\n  }\n\n  private isEmpty(s: string): boolean {\n    return s === null || typeof s === 'undefined' || this.normalize(s).length === 0\n  }\n}\n","\"use strict\";\n/**\n * Merges a set of default keys with a target object\n * (Like _.defaults, but will also extend onto null/undefined)\n *\n * @param {Object} [target] The object to extend\n * @param {Object} defaults The object to default to\n * @return {Object} extendedTarget\n */\n\nfunction defaults(target, defs) {\n  if (target == null) target = {};\n  var ret = {};\n  var keys = Object.keys(defs);\n  for (var i = 0, len = keys.length; i < len; i++) {\n    var key = keys[i];\n    ret[key] = target[key] || defs[key];\n  }\n  return ret;\n}\nexports.defaults = defaults;\n","\"use strict\";\nexports = module.exports = writtenNumber;\nvar util = require(\"./util\");\n\nvar languages = [\"en\", \"es\", \"pt\", \"fr\", \"eo\", \"it\", \"vi\", \"tr\"];\nvar i18n = {\n  en: require(\"./i18n/en.json\"),\n  es: require(\"./i18n/es.json\"),\n  pt: require(\"./i18n/pt.json\"),\n  ptPT: require(\"./i18n/pt-PT.json\"),\n  fr: require(\"./i18n/fr.json\"),\n  eo: require(\"./i18n/eo.json\"),\n  it: require(\"./i18n/it.json\"),\n  vi: require(\"./i18n/vi.json\"),\n  tr: require(\"./i18n/tr.json\"),\n  hu: require(\"./i18n/hu.json\"),\n  enIndian: require(\"./i18n/en-indian.json\")\n};\nexports.i18n = i18n;\n\nvar shortScale = [100];\nfor (var i = 1; i <= 16; i++) {\n  shortScale.push(Math.pow(10, i * 3));\n}\n\nvar longScale = [100, 1000];\nfor (i = 1; i <= 15; i++) {\n  longScale.push(Math.pow(10, i * 6));\n}\n\nwrittenNumber.defaults = {\n  noAnd: false,\n  lang: \"en\"\n};\n\n/**\n * Converts numbers to their written form.\n *\n * @param {Number} n The number to convert\n * @param {Object} [options] An object representation of the options\n * @return {String} writtenN The written form of `n`\n */\n\nfunction writtenNumber(n, options) {\n  options = options || {};\n  options = util.defaults(options, writtenNumber.defaults);\n\n  if (n < 0) {\n    return \"\";\n  }\n\n  n = Math.round(+n);\n\n  var language = typeof options.lang === \"string\"\n    ? i18n[options.lang]\n    : options.lang;\n  var scale = language.useLongScale ? longScale : shortScale;\n  var units = language.units;\n  var unit;\n\n  if (!(units instanceof Array)) {\n    var rawUnits = units;\n\n    units = [];\n    scale = Object.keys(rawUnits);\n\n    for (var i in scale) {\n      units.push(rawUnits[scale[i]]);\n      scale[i] = Math.pow(10, parseInt(scale[i]));\n    }\n  }\n\n  if (!language) {\n    if (languages.indexOf(writtenNumber.defaults.lang) < 0) {\n      writtenNumber.defaults.lang = \"en\";\n    }\n\n    language = i18n[writtenNumber.defaults.lang];\n  }\n\n  var baseCardinals = language.base;\n\n  if (language.unitExceptions[n]) return language.unitExceptions[n];\n  if (baseCardinals[n]) return baseCardinals[n];\n  if (n < 100)\n    return handleSmallerThan100(n, language, unit, baseCardinals, options);\n\n  var m = n % 100;\n  var ret = [];\n\n  if (m) {\n    if (\n      options.noAnd &&\n      !(language.andException && language.andException[10])\n    ) {\n      ret.push(writtenNumber(m, options));\n    } else {\n      ret.push(language.unitSeparator + writtenNumber(m, options));\n    }\n  }\n\n  var firstSignificant;\n\n  for (var i = 0, len = units.length; i < len; i++) {\n    var r = Math.floor(n / scale[i]);\n    var divideBy;\n\n    if (i === len - 1) divideBy = 1000000;\n    else divideBy = scale[i + 1] / scale[i];\n\n    r %= divideBy;\n\n    unit = units[i];\n\n    if (!r) continue;\n    firstSignificant = scale[i];\n\n    if (unit.useBaseInstead) {\n      var shouldUseBaseException =\n        unit.useBaseException.indexOf(r) > -1 &&\n        (unit.useBaseExceptionWhenNoTrailingNumbers\n          ? i === 0 && ret.length\n          : true);\n      if (!shouldUseBaseException) {\n        ret.push(baseCardinals[r * scale[i]]);\n      } else {\n        ret.push(r > 1 && unit.plural ? unit.plural : unit.singular);\n      }\n      continue;\n    }\n\n    var str;\n    if (typeof unit === \"string\") {\n      str = unit;\n    } else {\n      str = r > 1 && unit.plural && (!unit.avoidInNumberPlural || !m)\n        ? unit.plural\n        : unit.singular;\n    }\n\n    if (\n      unit.avoidPrefixException &&\n      unit.avoidPrefixException.indexOf(r) > -1\n    ) {\n      ret.push(str);\n      continue;\n    }\n\n    var exception = language.unitExceptions[r];\n    var number =\n      exception ||\n      writtenNumber(\n        r,\n        util.defaults(\n          {\n            // Languages with and exceptions need to set `noAnd` to false\n            noAnd: !((language.andException && language.andException[r]) ||\n              unit.andException) && true\n          },\n          options\n        )\n      );\n    n -= r * scale[i];\n    ret.push(number + \" \" + str);\n  }\n\n  var firstSignificantN = firstSignificant * Math.floor(n / firstSignificant);\n  var rest = n - firstSignificantN;\n\n  if (\n    language.andWhenTrailing &&\n    firstSignificant &&\n    0 < rest &&\n    ret[0].indexOf(language.unitSeparator) !== 0\n  ) {\n    ret = [ret[0], language.unitSeparator.replace(/\\s+$/, \"\")].concat(\n      ret.slice(1)\n    );\n  }\n\n  return ret.reverse().join(\" \");\n}\n\nfunction handleSmallerThan100(n, language, unit, baseCardinals, options) {\n  var dec = Math.floor(n / 10) * 10;\n  unit = n - dec;\n  if (unit) {\n    return (\n      baseCardinals[dec] + language.baseSeparator + writtenNumber(unit, options)\n    );\n  }\n  return baseCardinals[dec];\n}\n","(function () {\n  var forEach = Array.prototype.forEach;\n\n\n  /**\n   * Converts a roman number to its arabic equivalent.\n   *\n   * Will throw TypeError on non-string inputs.\n   *\n   * @param {String} roman\n   * @return {Number}\n   */\n  function toArabic (roman) {\n    if (('string' !== typeof roman) && (!(roman instanceof String))) throw new TypeError('toArabic expects a string');\n\n    // Zero is/was a special case. I'll go with Dionysius Exiguus on this one as\n    // seen on http://en.wikipedia.org/wiki/Roman_numerals#Zero\n    if (/^nulla$/i.test(roman) || !roman.length) return 0;\n\n    // Ultra magical regexp to validate roman numbers!\n    roman = roman.toUpperCase().match(/^(M{0,3})(CM|DC{0,3}|CD|C{0,3})(XC|LX{0,3}|XL|X{0,3})(IX|VI{0,3}|IV|I{0,3})$/);\n    if (!roman) throw new Error('toArabic expects a valid roman number');\n    var arabic = 0;\n\n    // Crunching the thousands...\n    arabic += roman[1].length * 1000;\n\n    // Crunching the hundreds...\n    if (roman[2] === 'CM') arabic += 900;\n    else if (roman[2] === 'CD') arabic += 400;\n    else arabic += roman[2].length * 100 + (roman[2][0] === 'D' ? 400 : 0);\n\n\n    // Crunching the tenths\n    if (roman[3] === 'XC') arabic += 90;\n    else if (roman[3] === 'XL') arabic += 40;\n    else arabic += roman[3].length * 10 + (roman[3][0] === 'L' ? 40 : 0);\n\n    // Crunching the...you see where I'm going, right?\n    if (roman[4] === 'IX') arabic += 9;\n    else if (roman[4] === 'IV') arabic += 4;\n    else arabic += roman[4].length * 1 + (roman[4][0] === 'V' ? 4 : 0);\n    return arabic;\n  };\n\n\n  module.exports = toArabic;\n\n})();\n","(function () {\n  /**\n   * Generate the roman number for the current power of tenth\n   *\n   * @param {Number} num\n   * @param {String} one\n   * @param {String} five\n   * @param {String} ten\n   * @return {String}\n   */\n  function upToTen (num, one, five, ten) {\n    var value = '';\n    switch (num) {\n      case 0: return value;\n      case 9: return one + ten;\n      case 4: return one + five;\n    }\n    if (num >= 5) value = five, num -= 5;\n    while (num-- > 0) value += one;\n    return value;\n  }\n\n\n  /**\n   * Converts an arabic number from 0 to 3999 to its roman equivalent.\n   *\n   * Will throw TypeError on non-number inputs (stringed numbers are accepted)\n   * or NaN and Error on number under 0 or over 3999.\n   *\n   * @param {Number/String} arabic\n   * @return {String}\n   */\n  function toRoman (arabic) {\n    // Checking input first with type comparisons, convert Number() instances to\n    // a literal, etc...\n    if (arabic instanceof Number) arabic = parseInt(arabic, 10);\n    if ('string' === typeof arabic || arabic instanceof String) {\n      arabic = parseInt(arabic, 10);\n      if (isNaN(arabic)) throw new TypeError('toArabic expects a number');\n    }\n    if ('number' !== typeof arabic) throw new TypeError('toArabic expects a number');\n\n    // Rounding up \"bad\" numbers: NaN, negative numbers, numbers over 3999,...\n    if (isNaN(arabic)) throw new TypeError('toArabic expects a real number');\n    if (arabic < 0) throw new Error('toArabic cannot express negative numbers');\n    if (arabic > 3999) throw new Error('toArabic cannot express numbers over 3999');\n\n    // Zero is/was a special case. I'll go with Dionysius Exiguus on this one as\n    // seen on http://en.wikipedia.org/wiki/Roman_numerals#Zero\n    if (arabic === 0) return 'nulla';\n    var roman = '';\n\n    // Chomping away by the power of tenths\n    roman += upToTen(Math.floor(arabic / 1000), 'M', '', ''), arabic %= 1000;\n    roman += upToTen(Math.floor(arabic / 100), 'C', 'D', 'M'), arabic %= 100;\n    roman += upToTen(Math.floor(arabic / 10), 'X', 'L', 'C'), arabic %= 10;\n    roman += upToTen(arabic, 'I', 'V', 'X');\n    return roman;\n  };\n\n\n  module.exports = toRoman;\n\n})();\n","(function () {\n  module.exports = {\n    toArabic: require('./lib/toArabic.js'),\n    toRoman:require('./lib/toRoman.js')\n  };\n})();\n","import { dateCode } from './date-code'\nimport { removeAccents } from './common'\n// @ts-ignore\nimport writtenNumber from 'written-number'\n// @ts-ignore\nimport romanNumerals from 'roman-numerals'\n\nexport interface JuristicPerson {\n  name: string\n  day: number\n  month: number\n  year: number\n}\n\n// higher order function\nconst pipe = (...ops: any[]) => ops.reduce((a: any, b: any) => (arg: any) => b(a(arg)))\n\n// higher order function\nconst flatMap = (fn: { (w: string): string[] }) => (words: string[]) =>\n  words.reduce((acc: string[], w: string) => {\n    acc.push(...fn(w))\n    return acc\n  }, [])\n\nconst toUpperCase = (s: string) => s.toUpperCase()\n\nconst trim = (s: string) => s.trim()\n\nconst normalize: (input: string) => string = pipe(\n  toUpperCase,\n  removeAccents,\n  trim\n)\n\nconst ignoreJuristicPersonTypeAbbreviations = (input: string) =>\n  input\n    .replace(/S\\.?\\s?EN\\s?N\\.?\\s?C\\.?$/g, '')\n    .replace(/S\\.?\\s?EN\\s?C\\.?\\s?POR\\s?A\\.?$/g, '')\n    .replace(/S\\.?\\s?EN\\s?C\\.?$/g, '')\n    .replace(/S\\.?\\s?DE\\s?R\\.?\\s?L\\.?$/g, '')\n    .replace(/S\\.?\\s?DE\\s?R\\.?\\s?L\\.?\\s?DE\\s?C\\.?\\s?V\\.?$/g, '')\n    .replace(/S\\.?\\s?A\\.?\\s?DE\\s?C\\.?\\s?V\\.?$/g, '')\n    .replace(/S\\.?\\s?A\\.?\\s?P\\.?\\s?I\\.?\\s?DE\\s?C\\.?\\s?V\\.?$/g, '')\n    .replace(/S\\.?\\s?A\\.?\\s?S\\.?\\s?DE\\s?C\\.?\\s?V\\.?$/g, '')\n    .replace(/A\\.?\\s?EN\\s?P\\.?$/g, '')\n    .replace(/S\\.?\\s?C\\.?\\s?[LPS]\\.?$/g, '')\n    .replace(/S\\.?\\s?[AC]\\.?$/g, '')\n    .replace(/S\\.?\\s?N\\.?\\s?C\\.?$/g, '')\n    .replace(/A\\.?\\s?C\\.?$/g, '')\n\nconst removeEmptyWords = (w: string) => w.length > 0\n\nconst splitWords = (input: string) => input.split(/[,\\s]+/).filter(removeEmptyWords)\n\n/*\n* This list is based on Anexo V from the official documentation\n* but some words have been commented out because the examples from\n* the same documentation contradict the list\n*/\nconst forbiddenWords = [\n  'EL',\n  'LA',\n  'DE',\n  'LOS',\n  'LAS',\n  'Y',\n  'DEL',\n  'MI',\n  'POR',\n  'CON',\n  /*'AL',*/ 'SUS',\n  'E',\n  'PARA',\n  'EN',\n  'MC',\n  'VON',\n  'MAC',\n  'VAN',\n  'COMPANIA',\n  'CIA',\n  'CIA.',\n  'SOCIEDAD',\n  'SOC',\n  'SOC.',\n  'COMPANY',\n  'CO',\n  /*'COOPERATIVA', 'COOP',*/\n  'SC',\n  'SCL',\n  'SCS',\n  'SNC',\n  'SRL',\n  'CV',\n  'SA',\n  'THE',\n  'OF',\n  'AND',\n  'A'\n]\n\nconst ignoreForbiddenWords = (words: string[]) =>\n  words.filter((w: string) => forbiddenWords.indexOf(w) === -1)\n\nconst markOneLetterAbbreviations = (words: string[]) =>\n  words.map((w: string) => w.replace(/^([^.])\\./g, '$1AABBRREEVVIIAATTIIOONN'))\n\nconst expandSpecialCharactersInSingletonWord = flatMap((w: string) => {\n  if (w.length === 1) {\n    return w\n      .replace('@', 'ARROBA')\n      .replace('´', 'APOSTROFE')\n      .replace('%', 'PORCIENTO')\n      .replace('#', 'NUMERO')\n      .replace('!', 'ADMIRACION')\n      .replace('.', 'PUNTO')\n      .replace('$', 'PESOS')\n      .replace('\"', 'COMILLAS')\n      .replace('-', 'GUION')\n      .replace('/', 'DIAGONAL')\n      .replace('+', 'SUMA')\n      .replace('(', 'ABRE PARENTESIS')\n      .replace(')', 'CIERRA PARENTESIS')\n      .split(' ')\n      .filter(removeEmptyWords)\n  }\n  return [w]\n})\n\nconst ignoreSpecialCharactersInWords = (words: string[]) =>\n  words.map(w => w.replace(/(.+?)[@´%#!.$\"-/+()](.+?)/g, '$1$2'))\n\nconst splitOneLetterAbbreviations = flatMap((w: string) =>\n  w.split('AABBRREEVVIIAATTIIOONN').filter(removeEmptyWords)\n)\n\nconst expandSingleArabicNumeral = (numeral: string) =>\n  writtenNumber(parseInt(numeral, 10), { lang: 'es' })\n    .toUpperCase()\n    .split(/\\s/)\n    .filter(removeEmptyWords)\n\nconst expandArabicNumerals = flatMap((word: string) => {\n  if (word.match(/[0-9]+/)) {\n    return expandSingleArabicNumeral(word)\n  }\n  return [word]\n})\n\nconst expandRomanNumerals = flatMap((word: string) => {\n  if (word.match(/^(M{0,4})(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/)) {\n    return expandSingleArabicNumeral(romanNumerals.toArabic(word))\n  }\n  return [word]\n})\n\nconst threeDigitsCode = (words: string[]) => {\n  if (words.length >= 3) {\n    return '' + words[0].charAt(0) + words[1].charAt(0) + words[2].charAt(0)\n  } else if (words.length === 2) {\n    return '' + words[0].charAt(0) + words[1].substring(0, 2)\n  } else {\n    return firstThreeCharactersWithRightPad(words[0])\n  }\n}\n\nconst firstThreeCharactersWithRightPad = (word: string) =>\n  word.length >= 3 ? word.substring(0, 3) : word.padEnd(3, 'X')\n\nconst nameCode: (input: string) => string = pipe(\n  normalize,\n  ignoreJuristicPersonTypeAbbreviations,\n  splitWords,\n  ignoreForbiddenWords,\n  markOneLetterAbbreviations,\n  expandSpecialCharactersInSingletonWord,\n  ignoreSpecialCharactersInWords,\n  splitOneLetterAbbreviations,\n  expandArabicNumerals,\n  expandRomanNumerals,\n  threeDigitsCode\n)\n\nexport const juristicPersonTenDigitsCode = (person: JuristicPerson): string =>\n  nameCode(person.name) + dateCode(person.day, person.month, person.year)\n","import homoclave from './homoclave'\nimport verificationDigit from './verification-digit'\nimport { naturalPersonTenDigitsCode, NaturalPerson } from './natural-person-tdc-code'\nimport { JuristicPerson, juristicPersonTenDigitsCode } from './juristic-person-tdc-code'\n\nexport default class RfcFacil {\n  public static forNaturalPerson(person: NaturalPerson): string {\n    const t: string = naturalPersonTenDigitsCode(person)\n    const h: string = homoclave(naturalPersonFullName(person))\n    const v: string = verificationDigit(t + h)\n    return t + h + v\n  }\n\n  public static forJuristicPerson(person: JuristicPerson): string {\n    const t: string = juristicPersonTenDigitsCode(person)\n    const h: string = homoclave(person.name)\n    const v: string = verificationDigit(' ' + t + h)\n    return t + h + v\n  }\n}\n\nfunction naturalPersonFullName(p: NaturalPerson): string {\n  return `${p.firstLastName} ${p.secondLastName} ${p.name}`\n}\n"],"names":["map","util","require$$0","require$$1","normalize","writtenNumber","homoclave","verificationDigit"],"mappings":"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"}