var map = {
    ' ': '00',
    '0': '00',
    '1': '01',
    '2': '02',
    '3': '03',
    '4': '04',
    '5': '05',
    '6': '06',
    '7': '07',
    '8': '08',
    '9': '09',
    '&': '10',
    A: '11',
    B: '12',
    C: '13',
    D: '14',
    E: '15',
    F: '16',
    G: '17',
    H: '18',
    I: '19',
    J: '21',
    K: '22',
    L: '23',
    M: '24',
    N: '25',
    O: '26',
    P: '27',
    Q: '28',
    R: '29',
    S: '32',
    T: '33',
    U: '34',
    V: '35',
    W: '36',
    X: '37',
    Y: '38',
    Z: '39',
    Ñ: '40'
};
var digits = '123456789ABCDEFGHIJKLMNPQRSTUVWXYZ';
function calculate(fullName) {
    var mappedFullName = '0' +
        normalize(fullName)
            .split('')
            .map(mapCharacterToTwoDigitsCode)
            .join('');
    var sum = sumPairsOfDigits(mappedFullName);
    var lastThreeDigits = sum % 1000;
    var quo = lastThreeDigits / 34;
    var reminder = lastThreeDigits % 34;
    return digits.charAt(quo) + digits.charAt(reminder);
}
// remove accents without removing the Ñ (u0303)
// and remove special characters: .'-,
function normalize(input) {
    return input
        .toUpperCase()
        .normalize('NFD')
        .replace(/[\u0300-\u0302]/g, '')
        .replace(/[\u0304-\u036f]/g, '')
        .replace(/N\u0303/g, 'Ñ')
        .replace(/[-\.',]/g, ''); // remove .'-,
}
function sumPairsOfDigits(input) {
    var sum = 0;
    for (var i = 0; i < input.length - 1; i++) {
        var firstPair = parseInt(input.substring(i, i + 2), 10);
        var secondPair = parseInt(input.substring(i + 1, i + 2), 10);
        sum += firstPair * secondPair;
    }
    return sum;
}
function mapCharacterToTwoDigitsCode(c) {
    var m = map[c];
    if (!m) {
        throw Error("No two-digit code mapping for char " + c);
    }
    return m;
}

var map$1 = {
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    G: 16,
    H: 17,
    I: 18,
    J: 19,
    K: 20,
    L: 21,
    M: 22,
    N: 23,
    '&': 24,
    O: 25,
    P: 26,
    Q: 27,
    R: 28,
    S: 29,
    T: 30,
    U: 31,
    V: 32,
    W: 33,
    X: 34,
    Y: 35,
    Z: 36,
    ' ': 37,
    Ñ: 38
};
function calculate$1(rfc12Digits) {
    var sum = rfc12Digits
        .split('')
        .map(function (c) { return map$1[c.toUpperCase()] || 0; })
        .reduce(function (sum, current, index) { return sum + current * (13 - index); }, 0);
    var reminder = sum % 11;
    if (reminder === 0) {
        return '0';
    }
    else {
        return (11 - reminder).toString(16).toUpperCase(); // from 1 to A (hex)
    }
}

function dateCode(day, month, year) {
    return year.toString().slice(-2) + zeroPadded(month) + zeroPadded(day);
}
function zeroPadded(n) {
    return ('00' + n).slice(-2);
}

function removeAccents(input) {
    return input.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
}

function naturalPersonTenDigitsCode(person) {
    return new NameCode(person).toString() + birthdayCode(person);
}
// matches any ocurrence of the special particles as a word: '^foo | foo | foo$''
var specialParticlesRegex = new RegExp('(?:' +
    ['DE', 'LA', 'LAS', 'MC', 'VON', 'DEL', 'LOS', 'Y', 'MAC', 'VAN', 'MI']
        .map(function (p) { return "^" + p + " | " + p + " | " + p + "$"; })
        .join('|') +
    ')', 'g');
function birthdayCode(person) {
    return dateCode(person.day, person.month, person.year);
}
var NameCode = /** @class */ (function () {
    function NameCode(person) {
        this.person = person;
        this.filteredPersonName = this.getFilteredPersonName();
    }
    NameCode.prototype.toString = function () {
        return this.obfuscateForbiddenWords(this.calculateCode());
    };
    NameCode.prototype.calculateCode = function () {
        if (this.isEmpty(this.person.firstLastName)) {
            return (this.normalize(this.person.secondLastName).substring(0, 2) +
                this.filteredPersonName.substring(0, 2));
        }
        else if (this.isEmpty(this.person.secondLastName)) {
            return (this.normalize(this.person.firstLastName).substring(0, 2) +
                this.filteredPersonName.substring(0, 2));
        }
        else if (this.isFirstLastNameIsTooShort()) {
            return (this.normalize(this.person.firstLastName).charAt(0) +
                this.normalize(this.person.secondLastName).charAt(0) +
                this.filteredPersonName.substring(0, 2));
        }
        else {
            return (this.normalize(this.person.firstLastName).charAt(0) +
                this.firstVowelExcludingFirstCharacterOf(this.normalize(this.person.firstLastName)) +
                this.normalize(this.person.secondLastName).charAt(0) +
                this.filteredPersonName.charAt(0));
        }
    };
    NameCode.prototype.obfuscateForbiddenWords = function (s) {
        var match = s.match(/(BUE[IY]|CAC[AO]|CAGA|KOGE|KAKA|MAME|KOJO|[KQ]ULO|CAGO|CO[GJ]E|COJO|FETO|JOTO|KA[CG]O)/) || s.match(/(MAMO|MEAR|M[EI]ON|MOCO|MULA|PED[AO]|PENE|PUT[AO]|RATA|RUIN)/);
        return match ? s.substring(0, 3) + 'X' : s;
    };
    // filter out common names (if more than one is provided)
    NameCode.prototype.getFilteredPersonName = function () {
        var normalized = this.normalize(this.person.name);
        if (this.person.name.split(' ').length > 1) {
            return normalized.replace(/^(JOSE|MARIA|MA|MA\.)\s+/i, '');
        }
        return normalized;
    };
    NameCode.prototype.normalize = function (s) {
        return removeAccents(s.toUpperCase())
            .replace(/\s+/g, '  ') // double space to allow multiple special-particles matching
            .replace(specialParticlesRegex, '')
            .replace(/\s+/g, ' ') // reset space
            .trim();
    };
    NameCode.prototype.firstVowelExcludingFirstCharacterOf = function (s) {
        var result = /[aeiou]/i.exec(s.slice(1));
        if (!result) {
            throw new Error('');
        }
        return result[0];
    };
    NameCode.prototype.isFirstLastNameIsTooShort = function () {
        return this.normalize(this.person.firstLastName).length <= 2;
    };
    NameCode.prototype.isEmpty = function (s) {
        return s === null || typeof s === 'undefined' || this.normalize(s).length === 0;
    };
    return NameCode;
}());

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/**
 * Merges a set of default keys with a target object
 * (Like _.defaults, but will also extend onto null/undefined)
 *
 * @param {Object} [target] The object to extend
 * @param {Object} defaults The object to default to
 * @return {Object} extendedTarget
 */

function defaults(target, defs) {
  if (target == null) target = {};
  var ret = {};
  var keys = Object.keys(defs);
  for (var i = 0, len = keys.length; i < len; i++) {
    var key = keys[i];
    ret[key] = target[key] || defs[key];
  }
  return ret;
}
var defaults_1 = defaults;

var util = {
	defaults: defaults_1
};

var util$1 = /*#__PURE__*/Object.freeze({
  default: util,
  __moduleExports: util,
  defaults: defaults_1
});

var useLongScale = false;
var baseSeparator = "-";
var unitSeparator = "and ";
var base = {
	"0": "zero",
	"1": "one",
	"2": "two",
	"3": "three",
	"4": "four",
	"5": "five",
	"6": "six",
	"7": "seven",
	"8": "eight",
	"9": "nine",
	"10": "ten",
	"11": "eleven",
	"12": "twelve",
	"13": "thirteen",
	"14": "fourteen",
	"15": "fifteen",
	"16": "sixteen",
	"17": "seventeen",
	"18": "eighteen",
	"19": "nineteen",
	"20": "twenty",
	"30": "thirty",
	"40": "forty",
	"50": "fifty",
	"60": "sixty",
	"70": "seventy",
	"80": "eighty",
	"90": "ninety"
};
var units = [
	"hundred",
	"thousand",
	"million",
	"billion",
	"trillion",
	"quadrillion",
	"quintillion",
	"sextillion",
	"septillion",
	"octillion",
	"nonillion",
	"decillion",
	"undecillion",
	"duodecillion",
	"tredecillion",
	"quattuordecillion",
	"quindecillion"
];
var unitExceptions = [
];
var en = {
	useLongScale: useLongScale,
	baseSeparator: baseSeparator,
	unitSeparator: unitSeparator,
	base: base,
	units: units,
	unitExceptions: unitExceptions
};

var en$1 = /*#__PURE__*/Object.freeze({
  useLongScale: useLongScale,
  baseSeparator: baseSeparator,
  unitSeparator: unitSeparator,
  base: base,
  units: units,
  unitExceptions: unitExceptions,
  default: en
});

var useLongScale$1 = true;
var baseSeparator$1 = " y ";
var unitSeparator$1 = "";
var base$1 = {
	"0": "cero",
	"1": "uno",
	"2": "dos",
	"3": "tres",
	"4": "cuatro",
	"5": "cinco",
	"6": "seis",
	"7": "siete",
	"8": "ocho",
	"9": "nueve",
	"10": "diez",
	"11": "once",
	"12": "doce",
	"13": "trece",
	"14": "catorce",
	"15": "quince",
	"16": "dieciséis",
	"17": "diecisiete",
	"18": "dieciocho",
	"19": "diecinueve",
	"20": "veinte",
	"21": "veintiuno",
	"22": "veintidós",
	"23": "veintitrés",
	"24": "veinticuatro",
	"25": "veinticinco",
	"26": "veintiséis",
	"27": "veintisiete",
	"28": "veintiocho",
	"29": "veintinueve",
	"30": "treinta",
	"40": "cuarenta",
	"50": "cincuenta",
	"60": "sesenta",
	"70": "setenta",
	"80": "ochenta",
	"90": "noventa",
	"100": "cien",
	"200": "doscientos",
	"300": "trescientos",
	"400": "cuatrocientos",
	"500": "quinientos",
	"600": "seiscientos",
	"700": "setecientos",
	"800": "ochocientos",
	"900": "novecientos",
	"1000": "mil"
};
var unitExceptions$1 = {
	"1": "un"
};
var units$1 = [
	{
		singular: "ciento",
		useBaseInstead: true,
		useBaseException: [
			1
		]
	},
	{
		singular: "mil",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "millón",
		plural: "millones"
	},
	{
		singular: "billón",
		plural: "billones"
	},
	{
		singular: "trillón",
		plural: "trillones"
	},
	{
		singular: "cuatrillón",
		plural: "cuatrillones"
	},
	{
		singular: "quintillón",
		plural: "quintillones"
	},
	{
		singular: "sextillón",
		plural: "sextillones"
	},
	{
		singular: "septillón",
		plural: "septillones"
	},
	{
		singular: "octillón",
		plural: "octillones"
	},
	{
		singular: "nonillón",
		plural: "nonillones"
	},
	{
		singular: "decillón",
		plural: "decillones"
	},
	{
		singular: "undecillón",
		plural: "undecillones"
	},
	{
		singular: "duodecillón",
		plural: "duodecillones"
	},
	{
		singular: "tredecillón",
		plural: "tredecillones"
	},
	{
		singular: "cuatrodecillón",
		plural: "cuatrodecillones"
	},
	{
		singular: "quindecillón",
		plural: "quindecillones"
	}
];
var es = {
	useLongScale: useLongScale$1,
	baseSeparator: baseSeparator$1,
	unitSeparator: unitSeparator$1,
	base: base$1,
	unitExceptions: unitExceptions$1,
	units: units$1
};

var es$1 = /*#__PURE__*/Object.freeze({
  useLongScale: useLongScale$1,
  baseSeparator: baseSeparator$1,
  unitSeparator: unitSeparator$1,
  base: base$1,
  unitExceptions: unitExceptions$1,
  units: units$1,
  default: es
});

var useLongScale$2 = false;
var baseSeparator$2 = " e ";
var unitSeparator$2 = "e ";
var andWhenTrailing = true;
var base$2 = {
	"0": "zero",
	"1": "um",
	"2": "dois",
	"3": "três",
	"4": "quatro",
	"5": "cinco",
	"6": "seis",
	"7": "sete",
	"8": "oito",
	"9": "nove",
	"10": "dez",
	"11": "onze",
	"12": "doze",
	"13": "treze",
	"14": "catorze",
	"15": "quinze",
	"16": "dezesseis",
	"17": "dezessete",
	"18": "dezoito",
	"19": "dezenove",
	"20": "vinte",
	"30": "trinta",
	"40": "quarenta",
	"50": "cinquenta",
	"60": "sessenta",
	"70": "setenta",
	"80": "oitenta",
	"90": "noventa",
	"100": "cem",
	"200": "duzentos",
	"300": "trezentos",
	"400": "quatrocentos",
	"500": "quinhentos",
	"600": "seiscentos",
	"700": "setecentos",
	"800": "oitocentos",
	"900": "novecentos",
	"1000": "mil"
};
var unitExceptions$2 = {
	"1": "um"
};
var units$2 = [
	{
		singular: "cento",
		useBaseInstead: true,
		useBaseException: [
			1
		],
		useBaseExceptionWhenNoTrailingNumbers: true,
		andException: true
	},
	{
		singular: "mil",
		avoidPrefixException: [
			1
		],
		andException: true
	},
	{
		singular: "milhão",
		plural: "milhões"
	},
	{
		singular: "bilhão",
		plural: "bilhões"
	},
	{
		singular: "trilhão",
		plural: "trilhões"
	},
	{
		singular: "quadrilhão",
		plural: "quadrilhão"
	},
	{
		singular: "quintilhão",
		plural: "quintilhões"
	},
	{
		singular: "sextilhão",
		plural: "sextilhões"
	},
	{
		singular: "septilhão",
		plural: "septilhões"
	},
	{
		singular: "octilhão",
		plural: "octilhões"
	},
	{
		singular: "nonilhão",
		plural: "nonilhões"
	},
	{
		singular: "decilhão",
		plural: "decilhões"
	},
	{
		singular: "undecilhão",
		plural: "undecilhões"
	},
	{
		singular: "doudecilhão",
		plural: "doudecilhões"
	},
	{
		singular: "tredecilhão",
		plural: "tredecilhões"
	}
];
var pt = {
	useLongScale: useLongScale$2,
	baseSeparator: baseSeparator$2,
	unitSeparator: unitSeparator$2,
	andWhenTrailing: andWhenTrailing,
	base: base$2,
	unitExceptions: unitExceptions$2,
	units: units$2
};

var pt$1 = /*#__PURE__*/Object.freeze({
  useLongScale: useLongScale$2,
  baseSeparator: baseSeparator$2,
  unitSeparator: unitSeparator$2,
  andWhenTrailing: andWhenTrailing,
  base: base$2,
  unitExceptions: unitExceptions$2,
  units: units$2,
  default: pt
});

var useLongScale$3 = true;
var baseSeparator$3 = " e ";
var unitSeparator$3 = "e ";
var andWhenTrailing$1 = true;
var base$3 = {
	"0": "zero",
	"1": "um",
	"2": "dois",
	"3": "três",
	"4": "quatro",
	"5": "cinco",
	"6": "seis",
	"7": "sete",
	"8": "oito",
	"9": "nove",
	"10": "dez",
	"11": "onze",
	"12": "doze",
	"13": "treze",
	"14": "catorze",
	"15": "quinze",
	"16": "dezasseis",
	"17": "dezassete",
	"18": "dezoito",
	"19": "dezanove",
	"20": "vinte",
	"30": "trinta",
	"40": "quarenta",
	"50": "cinquenta",
	"60": "sessenta",
	"70": "setenta",
	"80": "oitenta",
	"90": "noventa",
	"100": "cem",
	"200": "duzentos",
	"300": "trezentos",
	"400": "quatrocentos",
	"500": "quinhentos",
	"600": "seiscentos",
	"700": "setecentos",
	"800": "oitocentos",
	"900": "novecentos",
	"1000": "mil"
};
var unitExceptions$3 = {
	"1": "um"
};
var units$3 = [
	{
		singular: "cento",
		useBaseInstead: true,
		useBaseException: [
			1
		],
		useBaseExceptionWhenNoTrailingNumbers: true,
		andException: true
	},
	{
		singular: "mil",
		avoidPrefixException: [
			1
		],
		andException: true
	},
	{
		singular: "milhão",
		plural: "milhões"
	},
	{
		singular: "bilião",
		plural: "biliões"
	},
	{
		singular: "trilião",
		plural: "triliões"
	},
	{
		singular: "quadrilião",
		plural: "quadriliões"
	},
	{
		singular: "quintilião",
		plural: "quintiliões"
	},
	{
		singular: "sextilião",
		plural: "sextiliões"
	},
	{
		singular: "septilião",
		plural: "septiliões"
	},
	{
		singular: "octilião",
		plural: "octiliões"
	},
	{
		singular: "nonilião",
		plural: "noniliões"
	},
	{
		singular: "decilião",
		plural: "deciliões"
	}
];
var ptPT = {
	useLongScale: useLongScale$3,
	baseSeparator: baseSeparator$3,
	unitSeparator: unitSeparator$3,
	andWhenTrailing: andWhenTrailing$1,
	base: base$3,
	unitExceptions: unitExceptions$3,
	units: units$3
};

var ptPT$1 = /*#__PURE__*/Object.freeze({
  useLongScale: useLongScale$3,
  baseSeparator: baseSeparator$3,
  unitSeparator: unitSeparator$3,
  andWhenTrailing: andWhenTrailing$1,
  base: base$3,
  unitExceptions: unitExceptions$3,
  units: units$3,
  default: ptPT
});

var useLongScale$4 = false;
var baseSeparator$4 = "-";
var unitSeparator$4 = "";
var base$4 = {
	"0": "zéro",
	"1": "un",
	"2": "deux",
	"3": "trois",
	"4": "quatre",
	"5": "cinq",
	"6": "six",
	"7": "sept",
	"8": "huit",
	"9": "neuf",
	"10": "dix",
	"11": "onze",
	"12": "douze",
	"13": "treize",
	"14": "quatorze",
	"15": "quinze",
	"16": "seize",
	"17": "dix-sept",
	"18": "dix-huit",
	"19": "dix-neuf",
	"20": "vingt",
	"30": "trente",
	"40": "quarante",
	"50": "cinquante",
	"60": "soixante",
	"70": "soixante-dix",
	"80": "quatre-vingt",
	"90": "quatre-vingt-dix"
};
var units$4 = [
	{
		singular: "cent",
		plural: "cents",
		avoidInNumberPlural: true,
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "mille",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "million",
		plural: "millions"
	},
	{
		singular: "milliard",
		plural: "milliards"
	},
	{
		singular: "billion",
		plural: "billions"
	},
	{
		singular: "billiard",
		plural: "billiards"
	},
	{
		singular: "trillion",
		plural: "trillions"
	},
	{
		singular: "trilliard",
		plural: "trilliards"
	},
	{
		singular: "quadrillion",
		plural: "quadrillions"
	},
	{
		singular: "quadrilliard",
		plural: "quadrilliards"
	},
	{
		singular: "quintillion",
		plural: "quintillions"
	},
	{
		singular: "quintilliard",
		plural: "quintilliards"
	},
	{
		singular: "sextillion",
		plural: "sextillions"
	},
	{
		singular: "sextilliard",
		plural: "sextilliards"
	},
	{
		singular: "septillion",
		plural: "septillions"
	},
	{
		singular: "septilliard",
		plural: "septilliards"
	},
	{
		singular: "octillion",
		plural: "octillions"
	}
];
var unitExceptions$4 = {
	"71": "soixante et onze",
	"72": "soixante-douze",
	"73": "soixante-treize",
	"74": "soixante-quatorze",
	"75": "soixante-quinze",
	"76": "soixante-seize",
	"77": "soixante-dix-sept",
	"78": "soixante-dix-huit",
	"79": "soixante-dix-neuf",
	"80": "quatre-vingts",
	"91": "quatre-vingt-onze",
	"92": "quatre-vingt-douze",
	"93": "quatre-vingt-treize",
	"94": "quatre-vingt-quatorze",
	"95": "quatre-vingt-quinze",
	"96": "quatre-vingt-seize",
	"97": "quatre-vingt-dix-sept",
	"98": "quatre-vingt-dix-huit",
	"99": "quatre-vingt-dix-neuf"
};
var fr = {
	useLongScale: useLongScale$4,
	baseSeparator: baseSeparator$4,
	unitSeparator: unitSeparator$4,
	base: base$4,
	units: units$4,
	unitExceptions: unitExceptions$4
};

var fr$1 = /*#__PURE__*/Object.freeze({
  useLongScale: useLongScale$4,
  baseSeparator: baseSeparator$4,
  unitSeparator: unitSeparator$4,
  base: base$4,
  units: units$4,
  unitExceptions: unitExceptions$4,
  default: fr
});

var useLongScale$5 = false;
var baseSeparator$5 = " ";
var unitSeparator$5 = "";
var base$5 = {
	"0": "nulo",
	"1": "unu",
	"2": "du",
	"3": "tri",
	"4": "kvar",
	"5": "kvin",
	"6": "ses",
	"7": "sep",
	"8": "ok",
	"9": "naŭ",
	"10": "dek",
	"20": "dudek",
	"30": "tridek",
	"40": "kvardek",
	"50": "kvindek",
	"60": "sesdek",
	"70": "sepdek",
	"80": "okdek",
	"90": "naŭdek",
	"100": "cent",
	"200": "ducent",
	"300": "tricent",
	"400": "kvarcent",
	"500": "kvincent",
	"600": "sescent",
	"700": "sepcent",
	"800": "okcent",
	"900": "naŭcent"
};
var units$5 = [
	{
		useBaseInstead: true,
		useBaseException: [
		]
	},
	{
		singular: "mil",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "miliono",
		plural: "milionoj",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "miliardo",
		plural: "miliardoj",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "biliono",
		plural: "bilionoj",
		avoidPrefixException: [
			1
		]
	}
];
var unitExceptions$5 = [
];
var eo = {
	useLongScale: useLongScale$5,
	baseSeparator: baseSeparator$5,
	unitSeparator: unitSeparator$5,
	base: base$5,
	units: units$5,
	unitExceptions: unitExceptions$5
};

var eo$1 = /*#__PURE__*/Object.freeze({
  useLongScale: useLongScale$5,
  baseSeparator: baseSeparator$5,
  unitSeparator: unitSeparator$5,
  base: base$5,
  units: units$5,
  unitExceptions: unitExceptions$5,
  default: eo
});

var useLongScale$6 = false;
var baseSeparator$6 = "";
var unitSeparator$6 = "";
var generalSeparator = "";
var wordSeparator = "";
var base$6 = {
	"0": "zero",
	"1": "uno",
	"2": "due",
	"3": "tre",
	"4": "quattro",
	"5": "cinque",
	"6": "sei",
	"7": "sette",
	"8": "otto",
	"9": "nove",
	"10": "dieci",
	"11": "undici",
	"12": "dodici",
	"13": "tredici",
	"14": "quattordici",
	"15": "quindici",
	"16": "sedici",
	"17": "diciassette",
	"18": "diciotto",
	"19": "diciannove",
	"20": "venti",
	"21": "ventuno",
	"23": "ventitré",
	"28": "ventotto",
	"30": "trenta",
	"31": "trentuno",
	"33": "trentatré",
	"38": "trentotto",
	"40": "quaranta",
	"41": "quarantuno",
	"43": "quaranta­tré",
	"48": "quarantotto",
	"50": "cinquanta",
	"51": "cinquantuno",
	"53": "cinquantatré",
	"58": "cinquantotto",
	"60": "sessanta",
	"61": "sessantuno",
	"63": "sessanta­tré",
	"68": "sessantotto",
	"70": "settanta",
	"71": "settantuno",
	"73": "settantatré",
	"78": "settantotto",
	"80": "ottanta",
	"81": "ottantuno",
	"83": "ottantatré",
	"88": "ottantotto",
	"90": "novanta",
	"91": "novantuno",
	"93": "novantatré",
	"98": "novantotto",
	"100": "cento",
	"101": "centuno",
	"108": "centootto",
	"180": "centottanta",
	"201": "duecentuno",
	"301": "tre­cent­uno",
	"401": "quattro­cent­uno",
	"501": "cinque­cent­uno",
	"601": "sei­cent­uno",
	"701": "sette­cent­uno",
	"801": "otto­cent­uno",
	"901": "nove­cent­uno"
};
var unitExceptions$6 = {
	"1": "un"
};
var units$6 = [
	{
		singular: "cento",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "mille",
		plural: "mila",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "milione",
		plural: "milioni"
	},
	{
		singular: "miliardo",
		plural: "miliardi"
	},
	{
		singular: "bilione",
		plural: "bilioni"
	},
	{
		singular: "biliardo",
		plural: "biliardi"
	},
	{
		singular: "trilione",
		plural: "trilioni"
	},
	{
		singular: "triliardo",
		plural: "triliardi"
	},
	{
		singular: "quadrilione",
		plural: "quadrilioni"
	},
	{
		singular: "quadriliardo",
		plural: "quadriliardi"
	}
];
var it = {
	useLongScale: useLongScale$6,
	baseSeparator: baseSeparator$6,
	unitSeparator: unitSeparator$6,
	generalSeparator: generalSeparator,
	wordSeparator: wordSeparator,
	base: base$6,
	unitExceptions: unitExceptions$6,
	units: units$6
};

var it$1 = /*#__PURE__*/Object.freeze({
  useLongScale: useLongScale$6,
  baseSeparator: baseSeparator$6,
  unitSeparator: unitSeparator$6,
  generalSeparator: generalSeparator,
  wordSeparator: wordSeparator,
  base: base$6,
  unitExceptions: unitExceptions$6,
  units: units$6,
  default: it
});

var useLongScale$7 = false;
var baseSeparator$7 = " ";
var unitSeparator$7 = "và ";
var base$7 = {
	"0": "không",
	"1": "một",
	"2": "hai",
	"3": "ba",
	"4": "bốn",
	"5": "năm",
	"6": "sáu",
	"7": "bảy",
	"8": "tám",
	"9": "chín",
	"10": "mười",
	"15": "mười lăm",
	"20": "hai mươi",
	"21": "hai mươi mốt",
	"25": "hai mươi lăm",
	"30": "ba mươi",
	"31": "ba mươi mốt",
	"40": "bốn mươi",
	"41": "bốn mươi mốt",
	"45": "bốn mươi lăm",
	"50": "năm mươi",
	"51": "năm mươi mốt",
	"55": "năm mươi lăm",
	"60": "sáu mươi",
	"61": "sáu mươi mốt",
	"65": "sáu mươi lăm",
	"70": "bảy mươi",
	"71": "bảy mươi mốt",
	"75": "bảy mươi lăm",
	"80": "tám mươi",
	"81": "tám mươi mốt",
	"85": "tám mươi lăm",
	"90": "chín mươi",
	"91": "chín mươi mốt",
	"95": "chín mươi lăm"
};
var units$7 = [
	"trăm",
	"ngàn",
	"triệu",
	"tỷ",
	"nghìn tỷ"
];
var unitExceptions$7 = [
];
var vi = {
	useLongScale: useLongScale$7,
	baseSeparator: baseSeparator$7,
	unitSeparator: unitSeparator$7,
	base: base$7,
	units: units$7,
	unitExceptions: unitExceptions$7
};

var vi$1 = /*#__PURE__*/Object.freeze({
  useLongScale: useLongScale$7,
  baseSeparator: baseSeparator$7,
  unitSeparator: unitSeparator$7,
  base: base$7,
  units: units$7,
  unitExceptions: unitExceptions$7,
  default: vi
});

var useLongScale$8 = false;
var baseSeparator$8 = " ";
var unitSeparator$8 = "";
var base$8 = {
	"0": "sıfır",
	"1": "bir",
	"2": "iki",
	"3": "üç",
	"4": "dört",
	"5": "beş",
	"6": "altı",
	"7": "yedi",
	"8": "sekiz",
	"9": "dokuz",
	"10": "on",
	"20": "yirmi",
	"30": "otuz",
	"40": "kırk",
	"50": "elli",
	"60": "altmış",
	"70": "yetmiş",
	"80": "seksen",
	"90": "doksan"
};
var units$8 = [
	{
		singular: "yüz",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "bin",
		avoidPrefixException: [
			1
		]
	},
	"milyon",
	"milyar",
	"trilyon",
	"katrilyon",
	"kentilyon",
	"sekstilyon",
	"septilyon",
	"oktilyon",
	"nonilyon",
	"desilyon",
	"andesilyon",
	"dodesilyon",
	"tredesilyon",
	"katordesilyon",
	"kendesilyon"
];
var unitExceptions$8 = [
];
var tr = {
	useLongScale: useLongScale$8,
	baseSeparator: baseSeparator$8,
	unitSeparator: unitSeparator$8,
	base: base$8,
	units: units$8,
	unitExceptions: unitExceptions$8
};

var tr$1 = /*#__PURE__*/Object.freeze({
  useLongScale: useLongScale$8,
  baseSeparator: baseSeparator$8,
  unitSeparator: unitSeparator$8,
  base: base$8,
  units: units$8,
  unitExceptions: unitExceptions$8,
  default: tr
});

var useLongScale$9 = true;
var baseSeparator$9 = "";
var unitSeparator$9 = "és ";
var base$9 = {
	"0": "nulla",
	"1": "egy",
	"2": "kettő",
	"3": "három",
	"4": "négy",
	"5": "öt",
	"6": "hat",
	"7": "hét",
	"8": "nyolc",
	"9": "kilenc",
	"10": "tíz",
	"11": "tizenegy",
	"12": "tizenkettő",
	"13": "tizenhárom",
	"14": "tizennégy",
	"15": "tizenöt",
	"16": "tizenhat",
	"17": "tizenhét",
	"18": "tizennyolc",
	"19": "tizenkilenc",
	"20": "húsz",
	"21": "huszonegy",
	"22": "huszonkettő",
	"23": "huszonhárom",
	"24": "huszonnégy",
	"25": "huszonöt",
	"26": "huszonhat",
	"27": "huszonhét",
	"28": "huszonnyolc",
	"29": "huszonkilenc",
	"30": "harminc",
	"40": "negyven",
	"50": "ötven",
	"60": "hatvan",
	"70": "hetven",
	"80": "nyolcvan",
	"90": "kilencven",
	"100": "száz",
	"200": "kétszáz",
	"300": "háromszáz",
	"400": "négyszáz",
	"500": "ötszáz",
	"600": "hatszáz",
	"700": "hétszáz",
	"800": "nyolcszáz",
	"900": "kilencszáz",
	"1000": "ezer"
};
var unitExceptions$9 = {
	"1": "egy"
};
var units$9 = [
	{
		singular: "száz",
		useBaseInstead: true,
		useBaseException: [
			1
		]
	},
	{
		singular: "ezer",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "millió",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "milliárd",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "-billió",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "billiárd",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "trillió",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "trilliárd",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "kvadrillió",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "kvadrilliárd",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "kvintillió",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "kvintilliárd",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "szextillió",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "szeptillió",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "oktillió",
		avoidPrefixException: [
			1
		]
	},
	{
		singular: "nonillió",
		avoidPrefixException: [
			1
		]
	}
];
var hu = {
	useLongScale: useLongScale$9,
	baseSeparator: baseSeparator$9,
	unitSeparator: unitSeparator$9,
	base: base$9,
	unitExceptions: unitExceptions$9,
	units: units$9
};

var hu$1 = /*#__PURE__*/Object.freeze({
  useLongScale: useLongScale$9,
  baseSeparator: baseSeparator$9,
  unitSeparator: unitSeparator$9,
  base: base$9,
  unitExceptions: unitExceptions$9,
  units: units$9,
  default: hu
});

var useLongScale$10 = false;
var baseSeparator$10 = "-";
var unitSeparator$10 = "and ";
var base$10 = {
	"0": "zero",
	"1": "one",
	"2": "two",
	"3": "three",
	"4": "four",
	"5": "five",
	"6": "six",
	"7": "seven",
	"8": "eight",
	"9": "nine",
	"10": "ten",
	"11": "eleven",
	"12": "twelve",
	"13": "thirteen",
	"14": "fourteen",
	"15": "fifteen",
	"16": "sixteen",
	"17": "seventeen",
	"18": "eighteen",
	"19": "nineteen",
	"20": "twenty",
	"30": "thirty",
	"40": "forty",
	"50": "fifty",
	"60": "sixty",
	"70": "seventy",
	"80": "eighty",
	"90": "ninety"
};
var units$10 = {
	"2": "hundred",
	"3": "thousand",
	"5": "lakh",
	"7": "crore"
};
var unitExceptions$10 = [
];
var enIndian = {
	useLongScale: useLongScale$10,
	baseSeparator: baseSeparator$10,
	unitSeparator: unitSeparator$10,
	base: base$10,
	units: units$10,
	unitExceptions: unitExceptions$10
};

var enIndian$1 = /*#__PURE__*/Object.freeze({
  useLongScale: useLongScale$10,
  baseSeparator: baseSeparator$10,
  unitSeparator: unitSeparator$10,
  base: base$10,
  units: units$10,
  unitExceptions: unitExceptions$10,
  default: enIndian
});

var util$2 = ( util$1 && util ) || util$1;

var require$$0 = ( en$1 && en ) || en$1;

var require$$1 = ( es$1 && es ) || es$1;

var require$$2 = ( pt$1 && pt ) || pt$1;

var require$$3 = ( ptPT$1 && ptPT ) || ptPT$1;

var require$$4 = ( fr$1 && fr ) || fr$1;

var require$$5 = ( eo$1 && eo ) || eo$1;

var require$$6 = ( it$1 && it ) || it$1;

var require$$7 = ( vi$1 && vi ) || vi$1;

var require$$8 = ( tr$1 && tr ) || tr$1;

var require$$9 = ( hu$1 && hu ) || hu$1;

var require$$10 = ( enIndian$1 && enIndian ) || enIndian$1;

var lib = createCommonjsModule(function (module, exports) {
exports = module.exports = writtenNumber;


var languages = ["en", "es", "pt", "fr", "eo", "it", "vi", "tr"];
var i18n = {
  en: require$$0,
  es: require$$1,
  pt: require$$2,
  ptPT: require$$3,
  fr: require$$4,
  eo: require$$5,
  it: require$$6,
  vi: require$$7,
  tr: require$$8,
  hu: require$$9,
  enIndian: require$$10
};
exports.i18n = i18n;

var shortScale = [100];
for (var i = 1; i <= 16; i++) {
  shortScale.push(Math.pow(10, i * 3));
}

var longScale = [100, 1000];
for (i = 1; i <= 15; i++) {
  longScale.push(Math.pow(10, i * 6));
}

writtenNumber.defaults = {
  noAnd: false,
  lang: "en"
};

/**
 * Converts numbers to their written form.
 *
 * @param {Number} n The number to convert
 * @param {Object} [options] An object representation of the options
 * @return {String} writtenN The written form of `n`
 */

function writtenNumber(n, options) {
  options = options || {};
  options = util$2.defaults(options, writtenNumber.defaults);

  if (n < 0) {
    return "";
  }

  n = Math.round(+n);

  var language = typeof options.lang === "string"
    ? i18n[options.lang]
    : options.lang;
  var scale = language.useLongScale ? longScale : shortScale;
  var units = language.units;
  var unit;

  if (!(units instanceof Array)) {
    var rawUnits = units;

    units = [];
    scale = Object.keys(rawUnits);

    for (var i in scale) {
      units.push(rawUnits[scale[i]]);
      scale[i] = Math.pow(10, parseInt(scale[i]));
    }
  }

  if (!language) {
    if (languages.indexOf(writtenNumber.defaults.lang) < 0) {
      writtenNumber.defaults.lang = "en";
    }

    language = i18n[writtenNumber.defaults.lang];
  }

  var baseCardinals = language.base;

  if (language.unitExceptions[n]) return language.unitExceptions[n];
  if (baseCardinals[n]) return baseCardinals[n];
  if (n < 100)
    return handleSmallerThan100(n, language, unit, baseCardinals, options);

  var m = n % 100;
  var ret = [];

  if (m) {
    if (
      options.noAnd &&
      !(language.andException && language.andException[10])
    ) {
      ret.push(writtenNumber(m, options));
    } else {
      ret.push(language.unitSeparator + writtenNumber(m, options));
    }
  }

  var firstSignificant;

  for (var i = 0, len = units.length; i < len; i++) {
    var r = Math.floor(n / scale[i]);
    var divideBy;

    if (i === len - 1) divideBy = 1000000;
    else divideBy = scale[i + 1] / scale[i];

    r %= divideBy;

    unit = units[i];

    if (!r) continue;
    firstSignificant = scale[i];

    if (unit.useBaseInstead) {
      var shouldUseBaseException =
        unit.useBaseException.indexOf(r) > -1 &&
        (unit.useBaseExceptionWhenNoTrailingNumbers
          ? i === 0 && ret.length
          : true);
      if (!shouldUseBaseException) {
        ret.push(baseCardinals[r * scale[i]]);
      } else {
        ret.push(r > 1 && unit.plural ? unit.plural : unit.singular);
      }
      continue;
    }

    var str;
    if (typeof unit === "string") {
      str = unit;
    } else {
      str = r > 1 && unit.plural && (!unit.avoidInNumberPlural || !m)
        ? unit.plural
        : unit.singular;
    }

    if (
      unit.avoidPrefixException &&
      unit.avoidPrefixException.indexOf(r) > -1
    ) {
      ret.push(str);
      continue;
    }

    var exception = language.unitExceptions[r];
    var number =
      exception ||
      writtenNumber(
        r,
        util$2.defaults(
          {
            // Languages with and exceptions need to set `noAnd` to false
            noAnd: !((language.andException && language.andException[r]) ||
              unit.andException) && true
          },
          options
        )
      );
    n -= r * scale[i];
    ret.push(number + " " + str);
  }

  var firstSignificantN = firstSignificant * Math.floor(n / firstSignificant);
  var rest = n - firstSignificantN;

  if (
    language.andWhenTrailing &&
    firstSignificant &&
    0 < rest &&
    ret[0].indexOf(language.unitSeparator) !== 0
  ) {
    ret = [ret[0], language.unitSeparator.replace(/\s+$/, "")].concat(
      ret.slice(1)
    );
  }

  return ret.reverse().join(" ");
}

function handleSmallerThan100(n, language, unit, baseCardinals, options) {
  var dec = Math.floor(n / 10) * 10;
  unit = n - dec;
  if (unit) {
    return (
      baseCardinals[dec] + language.baseSeparator + writtenNumber(unit, options)
    );
  }
  return baseCardinals[dec];
}
});
var lib_1 = lib.i18n;

var toArabic = createCommonjsModule(function (module) {
(function () {


  /**
   * Converts a roman number to its arabic equivalent.
   *
   * Will throw TypeError on non-string inputs.
   *
   * @param {String} roman
   * @return {Number}
   */
  function toArabic (roman) {
    if (('string' !== typeof roman) && (!(roman instanceof String))) throw new TypeError('toArabic expects a string');

    // Zero is/was a special case. I'll go with Dionysius Exiguus on this one as
    // seen on http://en.wikipedia.org/wiki/Roman_numerals#Zero
    if (/^nulla$/i.test(roman) || !roman.length) return 0;

    // Ultra magical regexp to validate roman numbers!
    roman = roman.toUpperCase().match(/^(M{0,3})(CM|DC{0,3}|CD|C{0,3})(XC|LX{0,3}|XL|X{0,3})(IX|VI{0,3}|IV|I{0,3})$/);
    if (!roman) throw new Error('toArabic expects a valid roman number');
    var arabic = 0;

    // Crunching the thousands...
    arabic += roman[1].length * 1000;

    // Crunching the hundreds...
    if (roman[2] === 'CM') arabic += 900;
    else if (roman[2] === 'CD') arabic += 400;
    else arabic += roman[2].length * 100 + (roman[2][0] === 'D' ? 400 : 0);


    // Crunching the tenths
    if (roman[3] === 'XC') arabic += 90;
    else if (roman[3] === 'XL') arabic += 40;
    else arabic += roman[3].length * 10 + (roman[3][0] === 'L' ? 40 : 0);

    // Crunching the...you see where I'm going, right?
    if (roman[4] === 'IX') arabic += 9;
    else if (roman[4] === 'IV') arabic += 4;
    else arabic += roman[4].length * 1 + (roman[4][0] === 'V' ? 4 : 0);
    return arabic;
  }

  module.exports = toArabic;

})();
});

var toArabic$1 = /*#__PURE__*/Object.freeze({
  default: toArabic,
  __moduleExports: toArabic
});

var toRoman = createCommonjsModule(function (module) {
(function () {
  /**
   * Generate the roman number for the current power of tenth
   *
   * @param {Number} num
   * @param {String} one
   * @param {String} five
   * @param {String} ten
   * @return {String}
   */
  function upToTen (num, one, five, ten) {
    var value = '';
    switch (num) {
      case 0: return value;
      case 9: return one + ten;
      case 4: return one + five;
    }
    if (num >= 5) value = five, num -= 5;
    while (num-- > 0) value += one;
    return value;
  }


  /**
   * Converts an arabic number from 0 to 3999 to its roman equivalent.
   *
   * Will throw TypeError on non-number inputs (stringed numbers are accepted)
   * or NaN and Error on number under 0 or over 3999.
   *
   * @param {Number/String} arabic
   * @return {String}
   */
  function toRoman (arabic) {
    // Checking input first with type comparisons, convert Number() instances to
    // a literal, etc...
    if (arabic instanceof Number) arabic = parseInt(arabic, 10);
    if ('string' === typeof arabic || arabic instanceof String) {
      arabic = parseInt(arabic, 10);
      if (isNaN(arabic)) throw new TypeError('toArabic expects a number');
    }
    if ('number' !== typeof arabic) throw new TypeError('toArabic expects a number');

    // Rounding up "bad" numbers: NaN, negative numbers, numbers over 3999,...
    if (isNaN(arabic)) throw new TypeError('toArabic expects a real number');
    if (arabic < 0) throw new Error('toArabic cannot express negative numbers');
    if (arabic > 3999) throw new Error('toArabic cannot express numbers over 3999');

    // Zero is/was a special case. I'll go with Dionysius Exiguus on this one as
    // seen on http://en.wikipedia.org/wiki/Roman_numerals#Zero
    if (arabic === 0) return 'nulla';
    var roman = '';

    // Chomping away by the power of tenths
    roman += upToTen(Math.floor(arabic / 1000), 'M', '', ''), arabic %= 1000;
    roman += upToTen(Math.floor(arabic / 100), 'C', 'D', 'M'), arabic %= 100;
    roman += upToTen(Math.floor(arabic / 10), 'X', 'L', 'C'), arabic %= 10;
    roman += upToTen(arabic, 'I', 'V', 'X');
    return roman;
  }

  module.exports = toRoman;

})();
});

var toRoman$1 = /*#__PURE__*/Object.freeze({
  default: toRoman,
  __moduleExports: toRoman
});

var require$$0$1 = ( toArabic$1 && toArabic ) || toArabic$1;

var require$$1$1 = ( toRoman$1 && toRoman ) || toRoman$1;

var romanNumerals = createCommonjsModule(function (module) {
(function () {
  module.exports = {
    toArabic: require$$0$1,
    toRoman:require$$1$1
  };
})();
});
var romanNumerals_1 = romanNumerals.toArabic;
var romanNumerals_2 = romanNumerals.toRoman;

// higher order function
var pipe = function () {
    var ops = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        ops[_i] = arguments[_i];
    }
    return ops.reduce(function (a, b) { return function (arg) { return b(a(arg)); }; });
};
// higher order function
var flatMap = function (fn) { return function (words) {
    return words.reduce(function (acc, w) {
        acc.push.apply(acc, fn(w));
        return acc;
    }, []);
}; };
var toUpperCase = function (s) { return s.toUpperCase(); };
var trim = function (s) { return s.trim(); };
var normalize$1 = pipe(toUpperCase, removeAccents, trim);
var ignoreJuristicPersonTypeAbbreviations = function (input) {
    return input
        .replace(/S\.?\s?EN\s?N\.?\s?C\.?$/g, '')
        .replace(/S\.?\s?EN\s?C\.?\s?POR\s?A\.?$/g, '')
        .replace(/S\.?\s?EN\s?C\.?$/g, '')
        .replace(/S\.?\s?DE\s?R\.?\s?L\.?$/g, '')
        .replace(/S\.?\s?DE\s?R\.?\s?L\.?\s?DE\s?C\.?\s?V\.?$/g, '')
        .replace(/S\.?\s?A\.?\s?DE\s?C\.?\s?V\.?$/g, '')
        .replace(/S\.?\s?A\.?\s?P\.?\s?I\.?\s?DE\s?C\.?\s?V\.?$/g, '')
        .replace(/S\.?\s?A\.?\s?S\.?\s?DE\s?C\.?\s?V\.?$/g, '')
        .replace(/A\.?\s?EN\s?P\.?$/g, '')
        .replace(/S\.?\s?C\.?\s?[LPS]\.?$/g, '')
        .replace(/S\.?\s?[AC]\.?$/g, '')
        .replace(/S\.?\s?N\.?\s?C\.?$/g, '')
        .replace(/A\.?\s?C\.?$/g, '');
};
var removeEmptyWords = function (w) { return w.length > 0; };
var splitWords = function (input) { return input.split(/[,\s]+/).filter(removeEmptyWords); };
/*
* This list is based on Anexo V from the official documentation
* but some words have been commented out because the examples from
* the same documentation contradict the list
*/
var forbiddenWords = [
    'EL',
    'LA',
    'DE',
    'LOS',
    'LAS',
    'Y',
    'DEL',
    'MI',
    'POR',
    'CON',
    /*'AL',*/ 'SUS',
    'E',
    'PARA',
    'EN',
    'MC',
    'VON',
    'MAC',
    'VAN',
    'COMPANIA',
    'CIA',
    'CIA.',
    'SOCIEDAD',
    'SOC',
    'SOC.',
    'COMPANY',
    'CO',
    /*'COOPERATIVA', 'COOP',*/
    'SC',
    'SCL',
    'SCS',
    'SNC',
    'SRL',
    'CV',
    'SA',
    'THE',
    'OF',
    'AND',
    'A'
];
var ignoreForbiddenWords = function (words) {
    return words.filter(function (w) { return forbiddenWords.indexOf(w) === -1; });
};
var markOneLetterAbbreviations = function (words) {
    return words.map(function (w) { return w.replace(/^([^.])\./g, '$1AABBRREEVVIIAATTIIOONN'); });
};
var expandSpecialCharactersInSingletonWord = flatMap(function (w) {
    if (w.length === 1) {
        return w
            .replace('@', 'ARROBA')
            .replace('´', 'APOSTROFE')
            .replace('%', 'PORCIENTO')
            .replace('#', 'NUMERO')
            .replace('!', 'ADMIRACION')
            .replace('.', 'PUNTO')
            .replace('$', 'PESOS')
            .replace('"', 'COMILLAS')
            .replace('-', 'GUION')
            .replace('/', 'DIAGONAL')
            .replace('+', 'SUMA')
            .replace('(', 'ABRE PARENTESIS')
            .replace(')', 'CIERRA PARENTESIS')
            .split(' ')
            .filter(removeEmptyWords);
    }
    return [w];
});
var ignoreSpecialCharactersInWords = function (words) {
    return words.map(function (w) { return w.replace(/(.+?)[@´%#!.$"-/+()](.+?)/g, '$1$2'); });
};
var splitOneLetterAbbreviations = flatMap(function (w) {
    return w.split('AABBRREEVVIIAATTIIOONN').filter(removeEmptyWords);
});
var expandSingleArabicNumeral = function (numeral) {
    return lib(parseInt(numeral, 10), { lang: 'es' })
        .toUpperCase()
        .split(/\s/)
        .filter(removeEmptyWords);
};
var expandArabicNumerals = flatMap(function (word) {
    if (word.match(/[0-9]+/)) {
        return expandSingleArabicNumeral(word);
    }
    return [word];
});
var expandRomanNumerals = flatMap(function (word) {
    if (word.match(/^(M{0,4})(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/)) {
        return expandSingleArabicNumeral(romanNumerals.toArabic(word));
    }
    return [word];
});
var threeDigitsCode = function (words) {
    if (words.length >= 3) {
        return '' + words[0].charAt(0) + words[1].charAt(0) + words[2].charAt(0);
    }
    else if (words.length === 2) {
        return '' + words[0].charAt(0) + words[1].substring(0, 2);
    }
    else {
        return firstThreeCharactersWithRightPad(words[0]);
    }
};
var firstThreeCharactersWithRightPad = function (word) {
    return word.length >= 3 ? word.substring(0, 3) : word.padEnd(3, 'X');
};
var nameCode = pipe(normalize$1, ignoreJuristicPersonTypeAbbreviations, splitWords, ignoreForbiddenWords, markOneLetterAbbreviations, expandSpecialCharactersInSingletonWord, ignoreSpecialCharactersInWords, splitOneLetterAbbreviations, expandArabicNumerals, expandRomanNumerals, threeDigitsCode);
var juristicPersonTenDigitsCode = function (person) {
    return nameCode(person.name) + dateCode(person.day, person.month, person.year);
};

var RfcFacil = /** @class */ (function () {
    function RfcFacil() {
    }
    RfcFacil.forNaturalPerson = function (person) {
        var t = naturalPersonTenDigitsCode(person);
        var h = calculate(naturalPersonFullName(person));
        var v = calculate$1(t + h);
        return t + h + v;
    };
    RfcFacil.forJuristicPerson = function (person) {
        var t = juristicPersonTenDigitsCode(person);
        var h = calculate(person.name);
        var v = calculate$1(' ' + t + h);
        return t + h + v;
    };
    return RfcFacil;
}());
function naturalPersonFullName(p) {
    return p.firstLastName + " " + p.secondLastName + " " + p.name;
}

export default RfcFacil;
//# sourceMappingURL=rfc-facil.es5.js.map
