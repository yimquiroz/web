"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var date_code_1 = require("./date-code");
var common_1 = require("./common");
// @ts-ignore
var written_number_1 = require("written-number");
// @ts-ignore
var roman_numerals_1 = require("roman-numerals");
// higher order function
var pipe = function () {
    var ops = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        ops[_i] = arguments[_i];
    }
    return ops.reduce(function (a, b) { return function (arg) { return b(a(arg)); }; });
};
// higher order function
var flatMap = function (fn) { return function (words) {
    return words.reduce(function (acc, w) {
        acc.push.apply(acc, fn(w));
        return acc;
    }, []);
}; };
var toUpperCase = function (s) { return s.toUpperCase(); };
var trim = function (s) { return s.trim(); };
var normalize = pipe(toUpperCase, common_1.removeAccents, trim);
var ignoreJuristicPersonTypeAbbreviations = function (input) {
    return input
        .replace(/S\.?\s?EN\s?N\.?\s?C\.?$/g, '')
        .replace(/S\.?\s?EN\s?C\.?\s?POR\s?A\.?$/g, '')
        .replace(/S\.?\s?EN\s?C\.?$/g, '')
        .replace(/S\.?\s?DE\s?R\.?\s?L\.?$/g, '')
        .replace(/S\.?\s?DE\s?R\.?\s?L\.?\s?DE\s?C\.?\s?V\.?$/g, '')
        .replace(/S\.?\s?A\.?\s?DE\s?C\.?\s?V\.?$/g, '')
        .replace(/S\.?\s?A\.?\s?P\.?\s?I\.?\s?DE\s?C\.?\s?V\.?$/g, '')
        .replace(/S\.?\s?A\.?\s?S\.?\s?DE\s?C\.?\s?V\.?$/g, '')
        .replace(/A\.?\s?EN\s?P\.?$/g, '')
        .replace(/S\.?\s?C\.?\s?[LPS]\.?$/g, '')
        .replace(/S\.?\s?[AC]\.?$/g, '')
        .replace(/S\.?\s?N\.?\s?C\.?$/g, '')
        .replace(/A\.?\s?C\.?$/g, '');
};
var removeEmptyWords = function (w) { return w.length > 0; };
var splitWords = function (input) { return input.split(/[,\s]+/).filter(removeEmptyWords); };
/*
* This list is based on Anexo V from the official documentation
* but some words have been commented out because the examples from
* the same documentation contradict the list
*/
var forbiddenWords = [
    'EL',
    'LA',
    'DE',
    'LOS',
    'LAS',
    'Y',
    'DEL',
    'MI',
    'POR',
    'CON',
    /*'AL',*/ 'SUS',
    'E',
    'PARA',
    'EN',
    'MC',
    'VON',
    'MAC',
    'VAN',
    'COMPANIA',
    'CIA',
    'CIA.',
    'SOCIEDAD',
    'SOC',
    'SOC.',
    'COMPANY',
    'CO',
    /*'COOPERATIVA', 'COOP',*/
    'SC',
    'SCL',
    'SCS',
    'SNC',
    'SRL',
    'CV',
    'SA',
    'THE',
    'OF',
    'AND',
    'A'
];
var ignoreForbiddenWords = function (words) {
    return words.filter(function (w) { return forbiddenWords.indexOf(w) === -1; });
};
var markOneLetterAbbreviations = function (words) {
    return words.map(function (w) { return w.replace(/^([^.])\./g, '$1AABBRREEVVIIAATTIIOONN'); });
};
var expandSpecialCharactersInSingletonWord = flatMap(function (w) {
    if (w.length === 1) {
        return w
            .replace('@', 'ARROBA')
            .replace('´', 'APOSTROFE')
            .replace('%', 'PORCIENTO')
            .replace('#', 'NUMERO')
            .replace('!', 'ADMIRACION')
            .replace('.', 'PUNTO')
            .replace('$', 'PESOS')
            .replace('"', 'COMILLAS')
            .replace('-', 'GUION')
            .replace('/', 'DIAGONAL')
            .replace('+', 'SUMA')
            .replace('(', 'ABRE PARENTESIS')
            .replace(')', 'CIERRA PARENTESIS')
            .split(' ')
            .filter(removeEmptyWords);
    }
    return [w];
});
var ignoreSpecialCharactersInWords = function (words) {
    return words.map(function (w) { return w.replace(/(.+?)[@´%#!.$"-/+()](.+?)/g, '$1$2'); });
};
var splitOneLetterAbbreviations = flatMap(function (w) {
    return w.split('AABBRREEVVIIAATTIIOONN').filter(removeEmptyWords);
});
var expandSingleArabicNumeral = function (numeral) {
    return written_number_1.default(parseInt(numeral, 10), { lang: 'es' })
        .toUpperCase()
        .split(/\s/)
        .filter(removeEmptyWords);
};
var expandArabicNumerals = flatMap(function (word) {
    if (word.match(/[0-9]+/)) {
        return expandSingleArabicNumeral(word);
    }
    return [word];
});
var expandRomanNumerals = flatMap(function (word) {
    if (word.match(/^(M{0,4})(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/)) {
        return expandSingleArabicNumeral(roman_numerals_1.default.toArabic(word));
    }
    return [word];
});
var threeDigitsCode = function (words) {
    if (words.length >= 3) {
        return '' + words[0].charAt(0) + words[1].charAt(0) + words[2].charAt(0);
    }
    else if (words.length === 2) {
        return '' + words[0].charAt(0) + words[1].substring(0, 2);
    }
    else {
        return firstThreeCharactersWithRightPad(words[0]);
    }
};
var firstThreeCharactersWithRightPad = function (word) {
    return word.length >= 3 ? word.substring(0, 3) : word.padEnd(3, 'X');
};
var nameCode = pipe(normalize, ignoreJuristicPersonTypeAbbreviations, splitWords, ignoreForbiddenWords, markOneLetterAbbreviations, expandSpecialCharactersInSingletonWord, ignoreSpecialCharactersInWords, splitOneLetterAbbreviations, expandArabicNumerals, expandRomanNumerals, threeDigitsCode);
exports.juristicPersonTenDigitsCode = function (person) {
    return nameCode(person.name) + date_code_1.dateCode(person.day, person.month, person.year);
};
//# sourceMappingURL=juristic-person-tdc-code.js.map