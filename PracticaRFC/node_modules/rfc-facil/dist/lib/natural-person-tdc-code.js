"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var date_code_1 = require("./date-code");
var common_1 = require("./common");
function naturalPersonTenDigitsCode(person) {
    return new NameCode(person).toString() + birthdayCode(person);
}
exports.naturalPersonTenDigitsCode = naturalPersonTenDigitsCode;
// matches any ocurrence of the special particles as a word: '^foo | foo | foo$''
var specialParticlesRegex = new RegExp('(?:' +
    ['DE', 'LA', 'LAS', 'MC', 'VON', 'DEL', 'LOS', 'Y', 'MAC', 'VAN', 'MI']
        .map(function (p) { return "^" + p + " | " + p + " | " + p + "$"; })
        .join('|') +
    ')', 'g');
function birthdayCode(person) {
    return date_code_1.dateCode(person.day, person.month, person.year);
}
var NameCode = /** @class */ (function () {
    function NameCode(person) {
        this.person = person;
        this.filteredPersonName = this.getFilteredPersonName();
    }
    NameCode.prototype.toString = function () {
        return this.obfuscateForbiddenWords(this.calculateCode());
    };
    NameCode.prototype.calculateCode = function () {
        if (this.isEmpty(this.person.firstLastName)) {
            return (this.normalize(this.person.secondLastName).substring(0, 2) +
                this.filteredPersonName.substring(0, 2));
        }
        else if (this.isEmpty(this.person.secondLastName)) {
            return (this.normalize(this.person.firstLastName).substring(0, 2) +
                this.filteredPersonName.substring(0, 2));
        }
        else if (this.isFirstLastNameIsTooShort()) {
            return (this.normalize(this.person.firstLastName).charAt(0) +
                this.normalize(this.person.secondLastName).charAt(0) +
                this.filteredPersonName.substring(0, 2));
        }
        else {
            return (this.normalize(this.person.firstLastName).charAt(0) +
                this.firstVowelExcludingFirstCharacterOf(this.normalize(this.person.firstLastName)) +
                this.normalize(this.person.secondLastName).charAt(0) +
                this.filteredPersonName.charAt(0));
        }
    };
    NameCode.prototype.obfuscateForbiddenWords = function (s) {
        var match = s.match(/(BUE[IY]|CAC[AO]|CAGA|KOGE|KAKA|MAME|KOJO|[KQ]ULO|CAGO|CO[GJ]E|COJO|FETO|JOTO|KA[CG]O)/) || s.match(/(MAMO|MEAR|M[EI]ON|MOCO|MULA|PED[AO]|PENE|PUT[AO]|RATA|RUIN)/);
        return match ? s.substring(0, 3) + 'X' : s;
    };
    // filter out common names (if more than one is provided)
    NameCode.prototype.getFilteredPersonName = function () {
        var normalized = this.normalize(this.person.name);
        if (this.person.name.split(' ').length > 1) {
            return normalized.replace(/^(JOSE|MARIA|MA|MA\.)\s+/i, '');
        }
        return normalized;
    };
    NameCode.prototype.normalize = function (s) {
        return common_1.removeAccents(s.toUpperCase())
            .replace(/\s+/g, '  ') // double space to allow multiple special-particles matching
            .replace(specialParticlesRegex, '')
            .replace(/\s+/g, ' ') // reset space
            .trim();
    };
    NameCode.prototype.firstVowelExcludingFirstCharacterOf = function (s) {
        var result = /[aeiou]/i.exec(s.slice(1));
        if (!result) {
            throw new Error('');
        }
        return result[0];
    };
    NameCode.prototype.isFirstLastNameIsTooShort = function () {
        return this.normalize(this.person.firstLastName).length <= 2;
    };
    NameCode.prototype.isEmpty = function (s) {
        return s === null || typeof s === 'undefined' || this.normalize(s).length === 0;
    };
    return NameCode;
}());
//# sourceMappingURL=natural-person-tdc-code.js.map